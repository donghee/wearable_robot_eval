FROM nvidia/opengl:1.2-glvnd-runtime-ubuntu20.04
LABEL maintainer="Donghee Park <dongheepark@gmail.com>"

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y \
    ca-certificates \
    sudo \
    openssh-client \
    git \
    openssl \
    locales \
    software-properties-common \
    dirmngr \
    gpg-agent \
    curl \
    && rm -rf /var/lib/apt/lists/*

# configure timezone
RUN ln -snf /usr/share/zoneinfo/Asia/Seoul /etc/localtime && echo "Asia/Seoul" > /etc/timezone
 
# configure locale
#RUN export LANGUAGE=ko_KR.UTF-8; export LANG=ko_KR.UTF-8; export LC_ALL=ko_KR.UTF-8; locale-gen ko_KR.UTF-8; DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
#RUN echo "LANG=ko_KR.UTF-8" > /etc/default/locale
#RUN echo "LANGUAGE=ko_KR.UTF-8" >> /etc/default/locale
#RUN echo "LC_ALL=ko_KR.UTF-8" >> /etc/default/locale

#ENV LANG ko_KR.UTF-8 
#ENV LANGUAGE ko_KR.UTF-8
#ENV LC_ALL ko_KR.UTF-8

# nvidia opengl
RUN dpkg --add-architecture i386 \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
        libxau6 libxau6:i386 \
        libxdmcp6 libxdmcp6:i386 \
        libxcb1 libxcb1:i386 \
        libxext6 libxext6:i386 \
        libx11-6 libx11-6:i386 && \
    rm -rf /var/lib/apt/lists/*

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
        ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
        ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics,compat32,utility

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

# Required for non-glvnd setups.
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}:/usr/local/nvidia/lib:/usr/local/nvidia/lib64

#####
# Copied from
# https://gitlab.com/nvidia/container-images/opengl/blob/ubuntu20.04/glvnd/devel/Dockerfile
# and removed :i386 packages (not found)
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
        pkg-config \
        libglvnd-dev libglvnd-dev:i386 \
        libgl1-mesa-dev libgl1-mesa-dev:i386 \
        libegl1-mesa-dev libegl1-mesa-dev:i386 \
        libgles2-mesa-dev libgles2-mesa-dev:i386 && \
    rm -rf /var/lib/apt/lists/*

# ROS
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}

RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN echo "deb http://packages.ros.org/ros2/ubuntu focal main" > /etc/apt/sources.list.d/ros2-latest.list

RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    python3-pip \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    python3-rosdep \
    python3-vcstool \
   && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install --no-install-recommends -y \
    ros-foxy-desktop \
    python3-argcomplete \
    ros-dev-tools \ 
   && rm -rf /var/lib/apt/lists/*

# Install python packages
RUN pip3 install -U \
    argcomplete \
    flake8 \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures
# This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
RUN pip3 freeze | grep pytest \
    && python3 -m pytest --version

# bootstrap rosdep
RUN rosdep init \
    && rosdep update

# setup colcon mixin and metadata
RUN colcon mixin add default \
      https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update && \
    colcon metadata add default \
      https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
    colcon metadata update

RUN apt-get update && apt-get install --no-install-recommends -y \
  ros-foxy-gazebo-dev \
  ros-foxy-gazebo-plugins \
  ros-foxy-gazebo-msgs \
  ros-foxy-gazebo-ros-pkgs \
  ros-foxy-gazebo-ros \
  ros-foxy-ros-core \
  ros-foxy-geometry2 \
  ros-foxy-joint-state-publisher-gui \
  ros-foxy-xacro \
  ros-foxy-gazebo-ros2-control \
  ros-foxy-ros2-controllers \
  ros-foxy-controller-manager \
  ros-foxy-gazebo-ros2-control \
  ros-foxy-ros2-controllers \
  tilix \
  tmux \
  vim

# FIXME: provide fix for these root-need
RUN apt-get update && apt-get install --no-install-recommends -y \
    apt-rdepends \
    && rm -rf /var/lib/apt/lists/*

# turbovnc
#ENV DISPLAY :1
RUN apt-get update && apt-get install -y --no-install-recommends \
    supervisor \
    lxde-core \
    tilix \
    mesa-utils \
    libglu1 \
    libsm6 \
    libxv1 \
    libxtst6 \
    libegl1-mesa \
    x11-xkb-utils \
    xauth \
    xfonts-base \
    xkb-data \
    lxde \
    nginx \ 
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

ARG TURBOVNC_VERSION=3.0.3
ARG VIRTUALGL_VERSION=3.0.2
ARG LIBJPEG_VERSION=2.1.5.1

RUN cd /tmp && \
    curl -O https://nchc.dl.sourceforge.net/project/turbovnc/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb

RUN cd /tmp && \
    curl -O https://nchc.dl.sourceforge.net/project/libjpeg-turbo/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb

RUN cd /tmp && \
    curl -O https://nchc.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb

RUN cd /tmp && \
    dpkg -i *.deb && \
    rm -f /tmp/*.deb
#    rm -f /tmp/*.deb && \
#    sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver

ENV PATH ${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin

# noVNC
WORKDIR /opt/
RUN git clone https://github.com/novnc/noVNC.git
WORKDIR /opt/noVNC/utils/
RUN git clone https://github.com/novnc/websockify
RUN mkdir -p /root/.vnc
COPY websockify-token.cfg /root/.vnc/
 
# nginx
COPY nginx.conf /etc/nginx/sites-available/default
#RUN systemctl restart nginx 

WORKDIR $HOME

COPY ./ros_entrypoint.sh /

ENTRYPOINT ["/ros_entrypoint.sh"]
